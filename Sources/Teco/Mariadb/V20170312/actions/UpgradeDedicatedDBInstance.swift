//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Mariadb {
    /// UpgradeDedicatedDBInstance请求参数结构体
    public struct UpgradeDedicatedDBInstanceRequest: TCRequestModel {
        /// 待升级的实例ID。形如：tdsql-ow728lmc，可以通过 DescribeDBInstances 查询实例获得。
        public let instanceId: String

        /// 内存大小，单位：GB，可以通过 DescribeFenceDBInstanceSpecs
        ///  查询实例规格获得。
        public let memory: Int64

        /// 存储空间大小，单位：GB，可以通过 DescribeFenceDBInstanceSpecs
        ///  查询实例规格获得不同内存大小对应的磁盘规格下限和上限。
        public let storage: Int64

        /// 错过切换时间窗口时，是否自动重试一次，0-否，1-是
        public let switchAutoRetry: Int64?

        /// 切换时间窗口开始时间
        public let switchStartTime: String?

        /// 切换时间窗口结束时间
        public let switchEndTime: String?

        public init(instanceId: String, memory: Int64, storage: Int64, switchAutoRetry: Int64? = nil, switchStartTime: String? = nil, switchEndTime: String? = nil) {
            self.instanceId = instanceId
            self.memory = memory
            self.storage = storage
            self.switchAutoRetry = switchAutoRetry
            self.switchStartTime = switchStartTime
            self.switchEndTime = switchEndTime
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case memory = "Memory"
            case storage = "Storage"
            case switchAutoRetry = "SwitchAutoRetry"
            case switchStartTime = "SwitchStartTime"
            case switchEndTime = "SwitchEndTime"
        }
    }

    /// UpgradeDedicatedDBInstance返回参数结构体
    public struct UpgradeDedicatedDBInstanceResponse: TCResponseModel {
        /// 异步流程Id
        public let flowId: Int64

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case flowId = "FlowId"
            case requestId = "RequestId"
        }
    }

    /// 升级独享云数据库实例
    ///
    /// 本接口(UpgradeDedicatedDBInstance)用于扩容独享云数据库实例。
    @inlinable
    public func upgradeDedicatedDBInstance(_ input: UpgradeDedicatedDBInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpgradeDedicatedDBInstanceResponse> {
        self.client.execute(action: "UpgradeDedicatedDBInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 升级独享云数据库实例
    ///
    /// 本接口(UpgradeDedicatedDBInstance)用于扩容独享云数据库实例。
    @inlinable
    public func upgradeDedicatedDBInstance(_ input: UpgradeDedicatedDBInstanceRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpgradeDedicatedDBInstanceResponse {
        try await self.client.execute(action: "UpgradeDedicatedDBInstance", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 升级独享云数据库实例
    ///
    /// 本接口(UpgradeDedicatedDBInstance)用于扩容独享云数据库实例。
    @inlinable
    public func upgradeDedicatedDBInstance(instanceId: String, memory: Int64, storage: Int64, switchAutoRetry: Int64? = nil, switchStartTime: String? = nil, switchEndTime: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpgradeDedicatedDBInstanceResponse> {
        self.upgradeDedicatedDBInstance(.init(instanceId: instanceId, memory: memory, storage: storage, switchAutoRetry: switchAutoRetry, switchStartTime: switchStartTime, switchEndTime: switchEndTime), region: region, logger: logger, on: eventLoop)
    }

    /// 升级独享云数据库实例
    ///
    /// 本接口(UpgradeDedicatedDBInstance)用于扩容独享云数据库实例。
    @inlinable
    public func upgradeDedicatedDBInstance(instanceId: String, memory: Int64, storage: Int64, switchAutoRetry: Int64? = nil, switchStartTime: String? = nil, switchEndTime: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> UpgradeDedicatedDBInstanceResponse {
        try await self.upgradeDedicatedDBInstance(.init(instanceId: instanceId, memory: memory, storage: storage, switchAutoRetry: switchAutoRetry, switchStartTime: switchStartTime, switchEndTime: switchEndTime), region: region, logger: logger, on: eventLoop)
    }
}
