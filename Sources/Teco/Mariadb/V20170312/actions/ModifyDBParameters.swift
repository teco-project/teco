//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

// Test PR teco-project/teco-code-generator#23.

import Logging
import NIOCore
import TecoCore

extension Mariadb {
    /// ModifyDBParameters请求参数结构体
    public struct ModifyDBParametersRequest: TCRequestModel {
        /// 实例 ID，形如：tdsql-ow728lmc。
        public let instanceId: String

        /// 参数列表，每一个元素是Param和Value的组合
        public let params: [DBParamValue]

        public init(instanceId: String, params: [DBParamValue]) {
            self.instanceId = instanceId
            self.params = params
        }

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case params = "Params"
        }
    }

    /// ModifyDBParameters返回参数结构体
    public struct ModifyDBParametersResponse: TCResponseModel {
        /// 实例 ID，形如：tdsql-ow728lmc。
        public let instanceId: String

        /// 参数修改结果
        public let result: [ParamModifyResult]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    /// 修改数据库参数
    ///
    /// 本接口(ModifyDBParameters)用于修改数据库参数。
    @inlinable
    public func modifyDBParameters(_ input: ModifyDBParametersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDBParametersResponse> {
        self.client.execute(action: "ModifyDBParameters", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 修改数据库参数
    ///
    /// 本接口(ModifyDBParameters)用于修改数据库参数。
    @inlinable
    public func modifyDBParameters(_ input: ModifyDBParametersRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDBParametersResponse {
        try await self.client.execute(action: "ModifyDBParameters", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 修改数据库参数
    ///
    /// 本接口(ModifyDBParameters)用于修改数据库参数。
    @inlinable
    public func modifyDBParameters(instanceId: String, params: [DBParamValue], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ModifyDBParametersResponse> {
        self.modifyDBParameters(.init(instanceId: instanceId, params: params), region: region, logger: logger, on: eventLoop)
    }

    /// 修改数据库参数
    ///
    /// 本接口(ModifyDBParameters)用于修改数据库参数。
    @inlinable
    public func modifyDBParameters(instanceId: String, params: [DBParamValue], region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> ModifyDBParametersResponse {
        try await self.modifyDBParameters(.init(instanceId: instanceId, params: params), region: region, logger: logger, on: eventLoop)
    }
}
