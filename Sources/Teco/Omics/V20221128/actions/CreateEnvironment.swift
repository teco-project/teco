//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Omics {
    /// CreateEnvironment请求参数结构体
    public struct CreateEnvironmentRequest: TCRequestModel {
        /// 环境名称。
        public let name: String

        /// 环境配置信息。
        public let config: EnvironmentConfig

        /// 环境描述。
        public let description: String?

        public init(name: String, config: EnvironmentConfig, description: String? = nil) {
            self.name = name
            self.config = config
            self.description = description
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case config = "Config"
            case description = "Description"
        }
    }

    /// CreateEnvironment返回参数结构体
    public struct CreateEnvironmentResponse: TCResponseModel {
        /// 环境ID。
        public let environmentId: String

        /// 工作流UUID。
        public let workflowUuid: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case environmentId = "EnvironmentId"
            case workflowUuid = "WorkflowUuid"
            case requestId = "RequestId"
        }
    }

    /// 创建环境
    ///
    /// 创建组学平台计算环境。
    @inlinable
    public func createEnvironment(_ input: CreateEnvironmentRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateEnvironmentResponse> {
        self.client.execute(action: "CreateEnvironment", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 创建环境
    ///
    /// 创建组学平台计算环境。
    @inlinable
    public func createEnvironment(_ input: CreateEnvironmentRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateEnvironmentResponse {
        try await self.client.execute(action: "CreateEnvironment", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 创建环境
    ///
    /// 创建组学平台计算环境。
    @inlinable
    public func createEnvironment(name: String, config: EnvironmentConfig, description: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateEnvironmentResponse> {
        self.createEnvironment(.init(name: name, config: config, description: description), region: region, logger: logger, on: eventLoop)
    }

    /// 创建环境
    ///
    /// 创建组学平台计算环境。
    @inlinable
    public func createEnvironment(name: String, config: EnvironmentConfig, description: String? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> CreateEnvironmentResponse {
        try await self.createEnvironment(.init(name: name, config: config, description: description), region: region, logger: logger, on: eventLoop)
    }
}
