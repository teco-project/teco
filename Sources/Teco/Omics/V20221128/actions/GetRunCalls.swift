//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

extension Omics {
    /// GetRunCalls请求参数结构体
    public struct GetRunCallsRequest: TCRequestModel {
        /// 任务Uuid。
        public let runUuid: String

        /// 项目ID。
        public let projectId: String

        /// 作业路径
        public let path: String

        public init(runUuid: String, projectId: String, path: String) {
            self.runUuid = runUuid
            self.projectId = projectId
            self.path = path
        }

        enum CodingKeys: String, CodingKey {
            case runUuid = "RunUuid"
            case projectId = "ProjectId"
            case path = "Path"
        }
    }

    /// GetRunCalls返回参数结构体
    public struct GetRunCallsResponse: TCResponseModel {
        /// 作业详情。
        public let calls: [RunMetadata]

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case calls = "Calls"
            case requestId = "RequestId"
        }
    }

    /// 查询作业详情
    ///
    /// 查询作业详情。
    @inlinable
    public func getRunCalls(_ input: GetRunCallsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetRunCallsResponse> {
        self.client.execute(action: "GetRunCalls", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 查询作业详情
    ///
    /// 查询作业详情。
    @inlinable
    public func getRunCalls(_ input: GetRunCallsRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetRunCallsResponse {
        try await self.client.execute(action: "GetRunCalls", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 查询作业详情
    ///
    /// 查询作业详情。
    @inlinable
    public func getRunCalls(runUuid: String, projectId: String, path: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetRunCallsResponse> {
        self.getRunCalls(.init(runUuid: runUuid, projectId: projectId, path: path), region: region, logger: logger, on: eventLoop)
    }

    /// 查询作业详情
    ///
    /// 查询作业详情。
    @inlinable
    public func getRunCalls(runUuid: String, projectId: String, path: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> GetRunCallsResponse {
        try await self.getRunCalls(.init(runUuid: runUuid, projectId: projectId, path: path), region: region, logger: logger, on: eventLoop)
    }
}
