//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Omics {
    /// DeleteEnvironment请求参数结构体
    public struct DeleteEnvironmentRequest: TCRequestModel {
        /// 环境ID。
        public let environmentId: String

        public init(environmentId: String) {
            self.environmentId = environmentId
        }

        enum CodingKeys: String, CodingKey {
            case environmentId = "EnvironmentId"
        }
    }

    /// DeleteEnvironment返回参数结构体
    public struct DeleteEnvironmentResponse: TCResponseModel {
        /// 工作流UUID。
        public let workflowUuid: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case workflowUuid = "WorkflowUuid"
            case requestId = "RequestId"
        }
    }

    /// 删除环境
    ///
    /// 删除环境。
    @inlinable
    public func deleteEnvironment(_ input: DeleteEnvironmentRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteEnvironmentResponse> {
        self.client.execute(action: "DeleteEnvironment", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 删除环境
    ///
    /// 删除环境。
    @inlinable
    public func deleteEnvironment(_ input: DeleteEnvironmentRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteEnvironmentResponse {
        try await self.client.execute(action: "DeleteEnvironment", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 删除环境
    ///
    /// 删除环境。
    @inlinable
    public func deleteEnvironment(environmentId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteEnvironmentResponse> {
        self.deleteEnvironment(.init(environmentId: environmentId), region: region, logger: logger, on: eventLoop)
    }

    /// 删除环境
    ///
    /// 删除环境。
    @inlinable
    public func deleteEnvironment(environmentId: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> DeleteEnvironmentResponse {
        try await self.deleteEnvironment(.init(environmentId: environmentId), region: region, logger: logger, on: eventLoop)
    }
}
