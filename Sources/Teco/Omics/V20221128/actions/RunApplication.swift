//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Omics {
    /// RunApplication请求参数结构体
    public struct RunApplicationRequest: TCRequestModel {
        /// 应用ID。
        public let applicationId: String

        /// 项目ID。
        public let projectId: String

        /// 任务批次名称。
        public let name: String

        /// 投递环境ID。
        public let environmentId: String

        /// 任务输入JSON。需要进行base64编码。
        public let inputBase64: String

        /// 任务缓存清理时间。不填表示不清理。
        public let cacheClearDelay: UInt64

        /// 运行选项。
        public let option: RunOption

        /// 任务批次描述。
        public let description: String?

        /// 批量投递表格ID，不填表示单例投递。
        public let tableId: String?

        /// 批量投递表格行UUID。不填表示表格全部行。
        public let tableRowUuids: [String]?

        public init(applicationId: String, projectId: String, name: String, environmentId: String, inputBase64: String, cacheClearDelay: UInt64, option: RunOption, description: String? = nil, tableId: String? = nil, tableRowUuids: [String]? = nil) {
            self.applicationId = applicationId
            self.projectId = projectId
            self.name = name
            self.environmentId = environmentId
            self.inputBase64 = inputBase64
            self.cacheClearDelay = cacheClearDelay
            self.option = option
            self.description = description
            self.tableId = tableId
            self.tableRowUuids = tableRowUuids
        }

        enum CodingKeys: String, CodingKey {
            case applicationId = "ApplicationId"
            case projectId = "ProjectId"
            case name = "Name"
            case environmentId = "EnvironmentId"
            case inputBase64 = "InputBase64"
            case cacheClearDelay = "CacheClearDelay"
            case option = "Option"
            case description = "Description"
            case tableId = "TableId"
            case tableRowUuids = "TableRowUuids"
        }
    }

    /// RunApplication返回参数结构体
    public struct RunApplicationResponse: TCResponseModel {
        /// 任务批次ID。
        public let runGroupId: String

        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case runGroupId = "RunGroupId"
            case requestId = "RequestId"
        }
    }

    /// 运行应用
    ///
    /// 运行应用。
    @inlinable
    public func runApplication(_ input: RunApplicationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RunApplicationResponse> {
        self.client.execute(action: "RunApplication", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 运行应用
    ///
    /// 运行应用。
    @inlinable
    public func runApplication(_ input: RunApplicationRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RunApplicationResponse {
        try await self.client.execute(action: "RunApplication", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 运行应用
    ///
    /// 运行应用。
    @inlinable
    public func runApplication(applicationId: String, projectId: String, name: String, environmentId: String, inputBase64: String, cacheClearDelay: UInt64, option: RunOption, description: String? = nil, tableId: String? = nil, tableRowUuids: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<RunApplicationResponse> {
        self.runApplication(.init(applicationId: applicationId, projectId: projectId, name: name, environmentId: environmentId, inputBase64: inputBase64, cacheClearDelay: cacheClearDelay, option: option, description: description, tableId: tableId, tableRowUuids: tableRowUuids), region: region, logger: logger, on: eventLoop)
    }

    /// 运行应用
    ///
    /// 运行应用。
    @inlinable
    public func runApplication(applicationId: String, projectId: String, name: String, environmentId: String, inputBase64: String, cacheClearDelay: UInt64, option: RunOption, description: String? = nil, tableId: String? = nil, tableRowUuids: [String]? = nil, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> RunApplicationResponse {
        try await self.runApplication(.init(applicationId: applicationId, projectId: projectId, name: name, environmentId: environmentId, inputBase64: inputBase64, cacheClearDelay: cacheClearDelay, option: option, description: description, tableId: tableId, tableRowUuids: tableRowUuids), region: region, logger: logger, on: eventLoop)
    }
}
