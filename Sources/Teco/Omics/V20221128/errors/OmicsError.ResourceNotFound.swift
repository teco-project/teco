//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCOmicsError {
    public struct ResourceNotFound: TCOmicsErrorType {
        enum Code: String {
            case applicationNotExist = "ResourceNotFound.ApplicationNotExist"
            case applicationVersionNotExist = "ResourceNotFound.ApplicationVersionNotExist"
            case cosBucketNotExist = "ResourceNotFound.CosBucketNotExist"
            case cosObjectNotExist = "ResourceNotFound.CosObjectNotExist"
            case environmentNotExist = "ResourceNotFound.EnvironmentNotExist"
            case projectNotExist = "ResourceNotFound.ProjectNotExist"
            case runGroupNotExist = "ResourceNotFound.RunGroupNotExist"
            case runNotExist = "ResourceNotFound.RunNotExist"
            case tableNotExist = "ResourceNotFound.TableNotExist"
            case tableRowNotExist = "ResourceNotFound.TableRowNotExist"
            case other = "ResourceNotFound"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        public static var applicationNotExist: ResourceNotFound {
            ResourceNotFound(.applicationNotExist)
        }

        public static var applicationVersionNotExist: ResourceNotFound {
            ResourceNotFound(.applicationVersionNotExist)
        }

        public static var cosBucketNotExist: ResourceNotFound {
            ResourceNotFound(.cosBucketNotExist)
        }

        public static var cosObjectNotExist: ResourceNotFound {
            ResourceNotFound(.cosObjectNotExist)
        }

        public static var environmentNotExist: ResourceNotFound {
            ResourceNotFound(.environmentNotExist)
        }

        public static var projectNotExist: ResourceNotFound {
            ResourceNotFound(.projectNotExist)
        }

        public static var runGroupNotExist: ResourceNotFound {
            ResourceNotFound(.runGroupNotExist)
        }

        public static var runNotExist: ResourceNotFound {
            ResourceNotFound(.runNotExist)
        }

        public static var tableNotExist: ResourceNotFound {
            ResourceNotFound(.tableNotExist)
        }

        public static var tableRowNotExist: ResourceNotFound {
            ResourceNotFound(.tableRowNotExist)
        }

        /// 资源不存在。
        public static var other: ResourceNotFound {
            ResourceNotFound(.other)
        }

        public func asOmicsError() -> TCOmicsError {
            let code: TCOmicsError.Code
            switch self.error {
            case .applicationNotExist:
                code = .resourceNotFound_ApplicationNotExist
            case .applicationVersionNotExist:
                code = .resourceNotFound_ApplicationVersionNotExist
            case .cosBucketNotExist:
                code = .resourceNotFound_CosBucketNotExist
            case .cosObjectNotExist:
                code = .resourceNotFound_CosObjectNotExist
            case .environmentNotExist:
                code = .resourceNotFound_EnvironmentNotExist
            case .projectNotExist:
                code = .resourceNotFound_ProjectNotExist
            case .runGroupNotExist:
                code = .resourceNotFound_RunGroupNotExist
            case .runNotExist:
                code = .resourceNotFound_RunNotExist
            case .tableNotExist:
                code = .resourceNotFound_TableNotExist
            case .tableRowNotExist:
                code = .resourceNotFound_TableRowNotExist
            case .other:
                code = .resourceNotFound
            }
            return TCOmicsError(code, context: self.context)
        }
    }
}
