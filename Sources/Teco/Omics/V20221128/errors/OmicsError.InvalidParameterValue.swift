//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import TecoCore

extension TCOmicsError {
    public struct InvalidParameterValue: TCOmicsErrorType {
        enum Code: String {
            case duplicateHeader = "InvalidParameterValue.DuplicateHeader"
            case duplicateName = "InvalidParameterValue.DuplicateName"
            case entrypointNotSet = "InvalidParameterValue.EntrypointNotSet"
            case environmentNotAvailable = "InvalidParameterValue.EnvironmentNotAvailable"
            case invalidBase64Encode = "InvalidParameterValue.InvalidBase64Encode"
            case invalidCosKey = "InvalidParameterValue.InvalidCosKey"
            case invalidCsvFormat = "InvalidParameterValue.InvalidCsvFormat"
            case invalidDescription = "InvalidParameterValue.InvalidDescription"
            case invalidHeader = "InvalidParameterValue.InvalidHeader"
            case invalidInputJsonFormat = "InvalidParameterValue.InvalidInputJsonFormat"
            case invalidInputPlaceholder = "InvalidParameterValue.InvalidInputPlaceholder"
            case invalidName = "InvalidParameterValue.InvalidName"
            case invalidRunOption = "InvalidParameterValue.InvalidRunOption"
            case invalidTableRow = "InvalidParameterValue.InvalidTableRow"
            case lengthLimitExceeded = "InvalidParameterValue.LengthLimitExceeded"
            case unsupportedDataType = "InvalidParameterValue.UnsupportedDataType"
            case other = "InvalidParameterValue"
        }

        private let error: Code

        public let context: TCErrorContext?

        public var errorCode: String {
            self.error.rawValue
        }

        /// Initializer used by ``TCClient`` to match an error of this type.
        public init?(errorCode: String, context: TCErrorContext) {
            guard let error = Code(rawValue: errorCode) else {
                return nil
            }
            self.error = error
            self.context = context
        }

        internal init(_ error: Code, context: TCErrorContext? = nil) {
            self.error = error
            self.context = context
        }

        public static var duplicateHeader: InvalidParameterValue {
            InvalidParameterValue(.duplicateHeader)
        }

        public static var duplicateName: InvalidParameterValue {
            InvalidParameterValue(.duplicateName)
        }

        public static var entrypointNotSet: InvalidParameterValue {
            InvalidParameterValue(.entrypointNotSet)
        }

        public static var environmentNotAvailable: InvalidParameterValue {
            InvalidParameterValue(.environmentNotAvailable)
        }

        public static var invalidBase64Encode: InvalidParameterValue {
            InvalidParameterValue(.invalidBase64Encode)
        }

        public static var invalidCosKey: InvalidParameterValue {
            InvalidParameterValue(.invalidCosKey)
        }

        public static var invalidCsvFormat: InvalidParameterValue {
            InvalidParameterValue(.invalidCsvFormat)
        }

        public static var invalidDescription: InvalidParameterValue {
            InvalidParameterValue(.invalidDescription)
        }

        public static var invalidHeader: InvalidParameterValue {
            InvalidParameterValue(.invalidHeader)
        }

        public static var invalidInputJsonFormat: InvalidParameterValue {
            InvalidParameterValue(.invalidInputJsonFormat)
        }

        public static var invalidInputPlaceholder: InvalidParameterValue {
            InvalidParameterValue(.invalidInputPlaceholder)
        }

        public static var invalidName: InvalidParameterValue {
            InvalidParameterValue(.invalidName)
        }

        public static var invalidRunOption: InvalidParameterValue {
            InvalidParameterValue(.invalidRunOption)
        }

        public static var invalidTableRow: InvalidParameterValue {
            InvalidParameterValue(.invalidTableRow)
        }

        public static var lengthLimitExceeded: InvalidParameterValue {
            InvalidParameterValue(.lengthLimitExceeded)
        }

        public static var unsupportedDataType: InvalidParameterValue {
            InvalidParameterValue(.unsupportedDataType)
        }

        /// 参数取值错误。
        public static var other: InvalidParameterValue {
            InvalidParameterValue(.other)
        }

        public func asOmicsError() -> TCOmicsError {
            let code: TCOmicsError.Code
            switch self.error {
            case .duplicateHeader:
                code = .invalidParameterValue_DuplicateHeader
            case .duplicateName:
                code = .invalidParameterValue_DuplicateName
            case .entrypointNotSet:
                code = .invalidParameterValue_EntrypointNotSet
            case .environmentNotAvailable:
                code = .invalidParameterValue_EnvironmentNotAvailable
            case .invalidBase64Encode:
                code = .invalidParameterValue_InvalidBase64Encode
            case .invalidCosKey:
                code = .invalidParameterValue_InvalidCosKey
            case .invalidCsvFormat:
                code = .invalidParameterValue_InvalidCsvFormat
            case .invalidDescription:
                code = .invalidParameterValue_InvalidDescription
            case .invalidHeader:
                code = .invalidParameterValue_InvalidHeader
            case .invalidInputJsonFormat:
                code = .invalidParameterValue_InvalidInputJsonFormat
            case .invalidInputPlaceholder:
                code = .invalidParameterValue_InvalidInputPlaceholder
            case .invalidName:
                code = .invalidParameterValue_InvalidName
            case .invalidRunOption:
                code = .invalidParameterValue_InvalidRunOption
            case .invalidTableRow:
                code = .invalidParameterValue_InvalidTableRow
            case .lengthLimitExceeded:
                code = .invalidParameterValue_LengthLimitExceeded
            case .unsupportedDataType:
                code = .invalidParameterValue_UnsupportedDataType
            case .other:
                code = .invalidParameterValue
            }
            return TCOmicsError(code, context: self.context)
        }
    }
}
