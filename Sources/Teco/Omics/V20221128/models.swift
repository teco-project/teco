//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

@_exported import struct Foundation.Date
import TecoCore
import TecoDateHelpers

extension Omics {
    /// 执行时间。
    public struct ExecutionTime: TCOutputModel {
        /// 提交时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var submitTime: Date?

        /// 开始时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var startTime: Date?

        /// 结束时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var endTime: Date?

        enum CodingKeys: String, CodingKey {
            case submitTime = "SubmitTime"
            case startTime = "StartTime"
            case endTime = "EndTime"
        }
    }

    /// 描述键值对过滤器，用于条件过滤查询。
    ///
    /// - 若存在多个Filter时，Filter间的关系为逻辑与（AND）关系。
    ///
    /// - 若同一个Filter存在多个Values，同一Filter下Values间的关系为逻辑或（OR）关系。
    public struct Filter: TCInputModel {
        /// 过滤字段。
        public let name: String?

        /// 过滤字段值。
        public let values: [String]?

        public init(name: String, values: [String]) {
            self.name = name
            self.values = values
        }

        enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Values"
        }
    }

    /// 任务。
    public struct Run: TCOutputModel {
        /// 任务UUID。
        public let runUuid: String?

        /// 项目ID。
        public let projectId: String?

        /// 应用ID。
        public let applicationId: String?

        /// 任务批次ID。
        public let runGroupId: String?

        /// 环境ID。
        public let environmentId: String?

        /// 用户定义ID，单例运行为空。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let userDefinedId: String?

        /// 表格ID，单例运行为空。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tableId: String?

        /// 表格行UUID，单例运行为空。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tableRowUuid: String?

        /// 任务状态。
        public let status: String?

        /// 任务输入。
        public let input: String?

        /// 运行选项。
        public let option: RunOption?

        /// 执行时间。
        public let executionTime: ExecutionTime?

        /// 错误信息。
        public let errorMessage: String?

        /// 创建时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var createTime: Date?

        /// 更新时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var updateTime: Date?

        enum CodingKeys: String, CodingKey {
            case runUuid = "RunUuid"
            case projectId = "ProjectId"
            case applicationId = "ApplicationId"
            case runGroupId = "RunGroupId"
            case environmentId = "EnvironmentId"
            case userDefinedId = "UserDefinedId"
            case tableId = "TableId"
            case tableRowUuid = "TableRowUuid"
            case status = "Status"
            case input = "Input"
            case option = "Option"
            case executionTime = "ExecutionTime"
            case errorMessage = "ErrorMessage"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
        }
    }

    /// 任务。
    public struct RunGroup: TCOutputModel {
        /// 任务批次ID。
        public let runGroupId: String?

        /// 项目ID。
        public let projectId: String?

        /// 项目名称。
        public let projectName: String?

        /// 应用ID。
        public let applicationId: String?

        /// 应用名称。
        public let applicationName: String?

        /// 应用类型。
        public let applicationType: String?

        /// 环境ID。
        public let environmentId: String?

        /// 环境名称。
        public let environmentName: String?

        /// 表格ID，单例运行为空。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let tableId: String?

        /// 任务名称。
        public let name: String?

        /// 任务描述。
        public let description: String?

        /// 任务状态。
        public let status: String?

        /// 任务输入。
        public let input: String?

        /// 运行选项。
        public let option: RunOption?

        /// 任务总数量。
        public let totalRun: UInt64?

        /// 各状态任务的数量。
        public let runStatusCounts: [RunStatusCount]?

        /// 执行时间。
        public let executionTime: ExecutionTime?

        /// 错误信息。
        public let errorMessage: String?

        /// 创建时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var createTime: Date?

        /// 更新时间。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var updateTime: Date?

        enum CodingKeys: String, CodingKey {
            case runGroupId = "RunGroupId"
            case projectId = "ProjectId"
            case projectName = "ProjectName"
            case applicationId = "ApplicationId"
            case applicationName = "ApplicationName"
            case applicationType = "ApplicationType"
            case environmentId = "EnvironmentId"
            case environmentName = "EnvironmentName"
            case tableId = "TableId"
            case name = "Name"
            case description = "Description"
            case status = "Status"
            case input = "Input"
            case option = "Option"
            case totalRun = "TotalRun"
            case runStatusCounts = "RunStatusCounts"
            case executionTime = "ExecutionTime"
            case errorMessage = "ErrorMessage"
            case createTime = "CreateTime"
            case updateTime = "UpdateTime"
        }
    }

    /// 任务作业详情。
    public struct RunMetadata: TCOutputModel {
        /// 任务类型。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let runType: String?

        /// 任务ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let runId: String?

        /// 父层ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let parentId: String?

        /// 作业ID。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let jobId: String?

        /// 作业名称。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let callName: String?

        /// Scatter索引。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let scatterIndex: String?

        /// 输入。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let input: String?

        /// 输出。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let output: String?

        /// 状态
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let status: String?

        /// 错误信息。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let errorMessage: String?

        /// 开始时间
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var startTime: Date?

        /// 提交时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var submitTime: Date?

        /// 结束时间。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        ///
        /// While the wrapped date value is immutable just like other fields, you can customize the projected
        /// string value (through `$`-prefix) in case the synthesized encoding is incorrect.
        @TCTimestampISO8601Encoding public var endTime: Date?

        /// 命令行。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let command: String?

        /// 运行时。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let runtime: String?

        /// 预处理。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let preprocess: Bool?

        /// 后处理。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let postProcess: Bool?

        /// Cache命中
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let callCached: Bool?

        /// 标准输出。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stdout: String?

        /// 错误输出。
        /// 注意：此字段可能返回 null，表示取不到有效值。
        public let stderr: String?

        enum CodingKeys: String, CodingKey {
            case runType = "RunType"
            case runId = "RunId"
            case parentId = "ParentId"
            case jobId = "JobId"
            case callName = "CallName"
            case scatterIndex = "ScatterIndex"
            case input = "Input"
            case output = "Output"
            case status = "Status"
            case errorMessage = "ErrorMessage"
            case startTime = "StartTime"
            case submitTime = "SubmitTime"
            case endTime = "EndTime"
            case command = "Command"
            case runtime = "Runtime"
            case preprocess = "Preprocess"
            case postProcess = "PostProcess"
            case callCached = "CallCached"
            case stdout = "Stdout"
            case stderr = "Stderr"
        }
    }

    /// 运行应用选项。
    public struct RunOption: TCInputModel, TCOutputModel {
        /// 运行失败模式，取值范围：
        /// - ContinueWhilePossible
        /// - NoNewCalls
        public let failureMode: String

        /// 是否使用Call-Caching功能。
        public let useCallCache: Bool

        /// 是否使用错误挂起功能。
        public let useErrorOnHold: Bool

        public init(failureMode: String, useCallCache: Bool, useErrorOnHold: Bool) {
            self.failureMode = failureMode
            self.useCallCache = useCallCache
            self.useErrorOnHold = useErrorOnHold
        }

        enum CodingKeys: String, CodingKey {
            case failureMode = "FailureMode"
            case useCallCache = "UseCallCache"
            case useErrorOnHold = "UseErrorOnHold"
        }
    }

    /// 任务运行状态。
    public struct RunStatusCount: TCOutputModel {
        /// 状态。
        public let status: String?

        /// 数量。
        public let count: UInt64?

        enum CodingKeys: String, CodingKey {
            case status = "Status"
            case count = "Count"
        }
    }
}
