//===----------------------------------------------------------------------===//
//
// This source file is part of the Teco open source project
//
// Copyright (c) 2022-2023 the Teco project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by TecoServiceGenerator.
// DO NOT EDIT.

import Logging
import NIOCore
import TecoCore

extension Car {
    /// StartPublishStreamWithURL请求参数结构体
    public struct StartPublishStreamWithURLRequest: TCRequest {
        /// 唯一用户身份标识，由业务方自定义，平台不予理解。
        public let userId: String

        /// 推流地址，仅支持rtmp协议。
        public let publishStreamURL: String

        public init(userId: String, publishStreamURL: String) {
            self.userId = userId
            self.publishStreamURL = publishStreamURL
        }

        enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case publishStreamURL = "PublishStreamURL"
        }
    }

    /// StartPublishStreamWithURL返回参数结构体
    public struct StartPublishStreamWithURLResponse: TCResponse {
        /// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
        public let requestId: String

        enum CodingKeys: String, CodingKey {
            case requestId = "RequestId"
        }
    }

    /// 开始云端推流到指定URL
    @inlinable @discardableResult
    public func startPublishStreamWithURL(_ input: StartPublishStreamWithURLRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<StartPublishStreamWithURLResponse> {
        self.client.execute(action: "StartPublishStreamWithURL", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop)
    }

    /// 开始云端推流到指定URL
    @inlinable @discardableResult
    public func startPublishStreamWithURL(_ input: StartPublishStreamWithURLRequest, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> StartPublishStreamWithURLResponse {
        try await self.client.execute(action: "StartPublishStreamWithURL", region: region, serviceConfig: self.config, input: input, logger: logger, on: eventLoop).get()
    }

    /// 开始云端推流到指定URL
    @inlinable @discardableResult
    public func startPublishStreamWithURL(userId: String, publishStreamURL: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) -> EventLoopFuture<StartPublishStreamWithURLResponse> {
        self.startPublishStreamWithURL(.init(userId: userId, publishStreamURL: publishStreamURL), region: region, logger: logger, on: eventLoop)
    }

    /// 开始云端推流到指定URL
    @inlinable @discardableResult
    public func startPublishStreamWithURL(userId: String, publishStreamURL: String, region: TCRegion? = nil, logger: Logger = TCClient.loggingDisabled, on eventLoop: EventLoop? = nil) async throws -> StartPublishStreamWithURLResponse {
        try await self.startPublishStreamWithURL(.init(userId: userId, publishStreamURL: publishStreamURL), region: region, logger: logger, on: eventLoop)
    }
}
